from flask import Blueprint, request, jsonify
from app_modules.scripts import *
import json
import hashlib

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è API
api_bp = Blueprint('api', __name__)

@api_bp.route('/example', methods=['GET'])
def example_route():
    return jsonify({"message": "API –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"})

@api_bp.route('/user', methods=['POST'])
def api_user():
    data = request.get_json()
    user_id = data.get('id')
    
    if user_id is None:
        return jsonify({'status':'error', "–û—à–∏–±–∫–∞": "–¢—Ä–µ–±—É–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}), 400

    user = SQL_request("SELECT * FROM users WHERE id = ?", (user_id,))
    
    if user:
        return jsonify({'status':'succes', "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ": user})
    else:
        return jsonify({'status':'error', "–û—à–∏–±–∫–∞": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

@api_bp.route('/all-data', methods=['GET'])
def api_all_data():
    data = SQL_request("SELECT * FROM users", all_data=True)
    return jsonify({"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ": data})

@api_bp.route('/user/jar', methods=['POST'])
def api_jar():
    data = request.get_json()
    user_id = data.get('id')
    date = data.get('date')
    print(date)

    if user_id is None:
        return jsonify({'status':'error', "–û—à–∏–±–∫–∞": "–¢—Ä–µ–±—É–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}), 400

    jar = SQL_request("SELECT jar FROM users WHERE id = ?", (user_id,))
    jar = json.loads(jar[0])

    if jar:
        if date:
            return jsonify({'status':'succes', f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ {date}": jar[date]})
        else:
            return jsonify({'status':'succes', "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è": jar})
    else:
        return jsonify({'status':'error', "–û—à–∏–±–∫–∞": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

@api_bp.route('/login', methods=['POST'])
def api_login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    hashed_password = hashlib.sha256(password.encode()).hexdigest() 
    user = SQL_request('SELECT * FROM users WHERE email = ?', (email,))
    if user:
        if user[12] == hashed_password:
            token = hashlib.sha256(user[4].encode()).hexdigest() 
            SQL_request("UPDATE users SET token = ? WHERE username = ?", (token, user[4]))
            return jsonify({'status':'succes'})
        else:
            return jsonify({'status':'error', 'message':'–ù–µ–≤–µ–Ω—ã–π –ø–∞—Ä–æ–ª—å'})

    else:
        date, time = now_time()
        date = f"{date} {time}"
        mood = {"üòä": "–†–∞–¥–æ—Å—Ç—å", "üò¢": "–ì—Ä—É—Å—Ç—å", "üòê": "–†–∞–≤–Ω–æ–¥—É—à–∏–µ", "üòÅ": "–í–æ—Å—Ç–æ—Ä–≥", "üò¥": "–£—Å—Ç–∞–ª–æ—Å—Ç—å"}
        topics = {"1": "–ü–∞—Ä—Ç–Ω—ë—Ä", "2": "–†–∞–±–æ—Ç–∞", "3": "–£—á—ë–±–∞", "4": "–ó–¥–æ—Ä–æ–≤—å–µ", "5": "–î—Ä—É–∑—å—è"}
        mood_json = json.dumps(mood, ensure_ascii=False)
        topics_json = json.dumps(topics, ensure_ascii=False)
        SQL_request('INSERT INTO users (mood, topics, email, password, time_registration, auth_method) VALUES (?, ?, ?, ?, ? , ?)',
            (mood_json, topics_json, email, hashed_password, date, "api"))

        return jsonify({'status':'succes', "message":"–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"})